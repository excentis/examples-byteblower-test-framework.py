[tool.yapf]
# Insert a blank line before a module docstring.
blank_line_before_module_docstring = true

# Put closing brackets on a separate line, dedented, if the bracketed
# expression can't fit in a single line. Applies to all kinds of brackets,
# including function definitions and calls. For example:
#
#   config = {
#       'key1': 'value1',
#       'key2': 'value2',
#   }        # <--- this bracket is dedented and on a separate line
#
#   time_series = self.remote_client.query_entity_counters(
#       entity='dev3246.region1',
#       key='dns.query_latency_tcp',
#       transform=Transformation.AVERAGE(window=timedelta(seconds=60)),
#       start_ts=now()-timedelta(days=3),
#       end_ts=now(),
#   )        # <--- this bracket is dedented and on a separate line
dedent_closing_brackets = true

# Split before the '.' if we need to split a longer expression:
#
#   foo = ('This is a really long string: {}, {}, {}, {}'.format(a, b, c, d))
#
# would reformat to something like:
#
#   foo = ('This is a really long string: {}, {}, {}, {}'
#          .format(a, b, c, d))
split_before_dot = true

# Split after the opening paren which surrounds an expression if it doesn't
# fit on a single line.
split_before_expression_after_opening_paren = true

# If an argument / parameter list is going to be split, then split before
# the first argument.
split_before_first_argument = true

# Set to True to split list comprehensions and generators that have
# non-trivial expressions and multiple clauses before each of these
# clauses. For example:
#
#   result = [
#       a_long_var + 100 for a_long_var in xrange(1000)
#       if a_long_var % 10]
#
# would reformat to something like:
#
#   result = [
#       a_long_var + 100
#       for a_long_var in xrange(1000)
#       if a_long_var % 10]
split_complex_comprehension = true

[tool.isort]
# 'yapf' profile does not exist!
# profile = "yapf"
# src_paths = ["byteblower", "tests"]

# NOTE: Additional configuration flags to enhance compatibility with the
# *yapf* code style configuration (see also ``tool.yapf`` section)
line_length = 79
multi_line_output = 3         # vert-hanging / VERTICAL_HANGING_INDENT
include_trailing_comma = true

# -- PYLINT CONFIG --------------------------------------------------------------------
# https://pypi.org/project/pylint/
[tool.pylint]

[tool.pylint.format]
# Maximum number of characters on a single line.
max-line-length = 79

# Maximum number of lines in a module.
max-module-lines = 500

[tool.pylint."messages control"]
disable = [
    # See https://pylint.pycqa.org/en/latest/user_guide/checkers/features.html
    # Deactivated because incompatible with SonarQube
    "R0205", # useless-object-inheritance
]

[tool.pylint.reports]
# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format = "json:test-reports/pylint.json,parseable:test-reports/pylint.txt,text:test-reports/pylint.log,colorized"

# Activate the evaluation score.
score = true
